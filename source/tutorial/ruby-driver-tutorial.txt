.. http://docs.mongodb.org/ecosystem/tutorial/ruby-driver-tutorial/

.. _ruby-driver-tutorial:

====================
Ruby Driver Tutorial
====================

.. default-domain:: mongodb

This tutorial discusses using the core MongoDB Ruby driver, version 2.0

Installation
------------

The Ruby driver is bundled as a gem, and is hosted on `Rubygems <http://rubygems.org>`_.
The driver can be installed manually or with bundler.

To install the gem manually:

.. code-block:: sh

    gem install mongo

To install the gem with bundler, include the following in your Gemfile:

.. code-block:: ruby

    gem 'mongo', '~> 2.0'

Note the following compatibility matrix to determine if the driver is
supported on your Runtime and server.

.. list-table::
   :header-rows: 1
   :widths: 28 30 30 30

   * - Ruby Version
     - 2.4.x
     - 2.6.x
     - 3.0.x

   * - MRI 1.8.x
     - No
     - No
     - No

   * - MRI 1.9.x
     - Yes
     - Yes
     - Yes

   * - MRI 2.0.x
     - Yes
     - Yes
     - Yes

   * - MRI 2.1.x
     - Yes
     - Yes
     - Yes

   * - MRI 2.2.x
     - Yes
     - Yes
     - Yes

   * - JRuby 1.7.x
     - Yes
     - Yes
     - Yes

Creating a Client
-----------------

The entry point to using the driver in all applications is via a ``Mongo::Client``.
A client can be created by passing in a list of hosts and options, or alternatively
can be instantiated using a URI. If a database name is not provided, then the
``admin`` database will be used by default.

To create a client to a standalone server, provide one host in the seed list.
Optionally you can force the cluster topology to be standalone without going through
the auto-discovery steps.

.. code-block:: ruby

  Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'mydb')
  Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'mydb', :connect => :direct)
  Mongo::Client.new('mongodb://127.0.0.1:27017/mydb')

To create a client to a replica set, pass one or more hosts and the replica set name.
The client has an auto-discovery feature that will find all members of the replica
set if not all are provided.

.. code-block:: ruby

  Mongo::Client.new([ '127.0.0.1:27017', '127.0.0.1:27018' ], :database => 'mydb', :replica_set => 'myapp')
  Mongo::Client.new('mongodb://127.0.0.1:27017,127.0.0.1:27018/mydb?replicaSet=myapp')

To create a client to a sharded cluster, pass one or more mongos hosts. The auto-
discovery functionality will determine that the servers are mongoses, but if you
would like to force it and bypass the auto-discovery pass the sharded option to the
client.

.. code-block:: ruby

  Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'mydb')
  Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'mydb', :connect => :sharded)
  Mongo::Client.new('mongodb://127.0.0.1:27017/mydb?connect=sharded' ])

Client Options
``````````````

A number of different options can be passed to a ``Mongo::Client`` to configure driver
behaviour, either by providing them in the options hash to the constructor or by
providing them in the URI.

Since the URI options are required in camel case, which is not the Ruby standard, the
following table shows the option in the URI and its corresponding option if passed
to the constructor in Ruby. Not the options passed directly should be symbols.

The options are explained in detail `here <http://docs.mongodb.org/master/reference/connection-string/>`_.
Note that options that are set in **milliseconds** in the URI, are represented as a ``Float``
in Ruby and the units are **seconds**.

URI Options Conversions
***********************

.. list-table::
   :header-rows: 1
   :widths: 40 105

   * - URI Option
     - Ruby Option

   * - replicaSet=String
     - ``:replica_set => String``

   * - ssl=Boolean
     - ``:ssl => true|false``

   * - connectTimeoutMS=Integer
     - ``:connection_timeout => Float``

   * - socketTimeoutMS=Integer
     - ``:socket_timeout => Float``

   * - maxPoolSize=Integer
     - ``:max_pool_size => Integer``

   * - minPoolSize=Integer
     - ``:min_pool_size => Integer``

   * - waitQueueTimeoutMS=Integer
     - ``:wait_queue_timeout => Float``

   * - w=Integer|String
     - ``{ :write => { :w => Integer|String }}``

   * - wtimeoutMS=Integer
     - ``{ :write => { :wtimeout => Float }}``

   * - journal=Boolean
     - ``{ :write => { :j => true|false }}``

   * - readPreference=String
     - ``{ :read => { :mode => Symbol }}``

   * - readPreferenceTags=Strings
     - ``{ :read => { :tag_sets => Array<String> }}``

   * - authSource=String
     - ``:auth_source => String``

   * - authMechanism=String
     - ``:auth_mech => Symbol``

   * - gssapiServiceName=String
     - ``{ :auth_mech_properties => { :gssapi_service_name => String }}``

Ruby Options
************

.. list-table::
   :header-rows: 1
   :widths: 40 105

   * - Option
     - Description

   * - ``:replica_set``
     - When connecting to a replica set, this is the name of the set to
       filter servers by. Takes a ``String``.

   * - ``:ssl``
     - Tell the client to connect to the servers via SSL. Takes ``true`` or
       ``false``.

   * - ``:connection_timeout``
     - The number of seconds as a ``Float`` to wait to establish a socket connection
       before raising an exception. Defaults to 5 seconds.

   * - ``:socket_timeout``
     - The number of seconds as a ``Float`` to wait for an operation to execute on a
       socket before raising an exception. Defaults to 5 seconds.

   * - ``:max_pool_size``
     - The maximum size of the connection pool for each server. Defaults to
       5 seconds.

   * - ``:min_pool_size =>``
     - The minimum number of connections in the connection pool for each
       server. Defaults to 1.

   * - ``:wait_queue_timeout``
     - The number of seconds as a ``Float`` to wait for a connection in the connection
       pool to become available. Defaults to 1.

   * - ``:write``
     - Specifies write concern options as a ``Hash``. The default write concern ``:w`` is
       ``:primary``. Keys in the hash can be ``:w``, ``:wtimeout``, ``:j``, ``:fsync``.
       Example:
         ``{ :write => { :w => 2 }}``.

   * - ``:read``
     - Specifies the read preference mode and tag sets for selecting servers as a ``Hash``.
       Keys in the hash are ``:mode`` and ``:tag_sets``. Example:
         ``{ :read => { :mode => :secondary, :tag_sets => ["berlin"] }}``

   * - ``:auth_source``
     - Specifies the authentication source. For MongoDB 2.6 and higher this defaults to
       **admin** if credentials are supplied, otherwise the current database.

   * - ``:auth_mech``
     - Specifies the authenticaion mechanism to use as a ``Symbol``. Can be one of:
       ``:mongodb_cr``, ``:mongodb_x509``, ``:plain``, ``:scram``. If user credentials
       are supplied but an ``:auth_mech`` is not, then on MongoDB 3.0 and higher this
       defaults to ``:scram`` and on 2.6 and lower defaults to ``:mongodb_cr``.

   * - ``:auth_mech_properties``
     - Provides additional authentication mechanism properties as a ``Hash``.

   * - ``:user``
     - The name of the user to authenticate with as a ``String``.

   * - ``:password``
     - The password of the user to authenticate with as a ``String``.

   * - ``:connect``
     - Overrides the auto-discovery feature of the driver and forces the cluster
       topology to a specific type. Can be a ``Symbol`` from ``:direct``,
       ``:replica_set`` or ``:sharded``.

   * - ``:heartbeat_frequency``
     - The number of seconds as a ``Float`` for the server monitors to refresh
       server states asynchronously. Defaults to 10.

   * - ``:database``
     - The name of the database to connect to as a ``String``. If not supplied
       the client will default to **admin**.

   * - ``:server_selection_timeout``
     - The number of seconds as a ``Float`` to wait for an appropriate server to
       be selected for an operation to be executed before raising an exception.
       Defaults to 30.

   * - ``:local_threshold``
     - Specifies the maximum latency in seconds as a ``Float`` between the nearest
       server and the servers that can be available for selection to operate on.
       Defaults to 0.015.

Inserting
---------

Inserting documents into a collection via the driver is done by selecting a
collection on the client and calling ``insert_one`` or ``insert_many``.

Insert operations will return a ``Mongo::Operation::Result`` object which will
give you information about the insert itself.

On MongoDB 2.6 and higher, if the insert failed, then an exception will be
raised since write commands are used.

On MongoDB 2.4, an exception will only be raised if the insert failed and the
write concern is 1 or higher.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'music')

  result = client[:artists].insert_one({ name: 'FKA Twigs' })
  result.n #=> returns 1, because 1 document was inserted.

  result = client[:artists].insert_many([
    { name: 'Flying Lotus' },
    { name: 'Aphex Twin' }
  ])
  result.n #=> returns 2, since 2 documents were inserted.

Querying
--------

The Ruby driver provides a fluent interface for querying that is accessed
via the method ``find`` on the collection. From there, one has various
options that can be added.

The query is lazily executed against the server only when iterating the
results - at that point the query is dispatched and a ``Mongo::Cursor`` is
returned.

To find all documents for a given filter, simply call ``find`` with the
query:

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'music')

  client[:artists].find(name: 'Flying Lotus').each do |document|
    #=> Yields a BSON::Document.
  end

Query Options
`````````````

To add options to a query, simply chain the appropriate methods after the
``find``. Note that the underlying object, the ``Mongo::Collection::View``,
is immutable and a new object will be returned after each method call.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'music')

  documents = client[:artists].find(name: 'Flying Lotus').skip(10).limit(10)
  documents.each do |document|
    #=> Yields a BSON::Document.
  end

The following is a full list of the available options that can be added
when querying and their corresponding methods.


Authentication
--------------

MongoDB supports a variety of `authentication mechanisms <http://docs.mongodb.org/master/core/access-control/>`_.

For more information about configuring your MongoDB server for each of these authentication mechanisms please see MongoDB's `online documentation <http://docs.mongodb.org/master/tutorial/enable-authentication>`_.

Creating a user
```````````````

A user can be created in a database by calling ``create`` on the users view with the name, password, and roles (optional).

.. code-block:: ruby

  client.database.users.create(
        'durran',
        password: 'password',
        roles: [ Mongo::Auth::Roles::READ_WRITE ])

Providing credentials
`````````````````````

As is the case for all authentication mechanisms, credentials are either provided at instantiation of the client or when a new client is created via the ``with`` method.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ],
                             user: 'test',
                             password: '123')

For MongoDB 2.6 and higher, ``:auth_source`` defaults to **admin**, otherwise the current database is used.

The current database can be changed using the client's ``use`` method.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ])
  client.use('music')

Then a new client can be created with the authentication credentials.

.. code-block:: ruby

  client.with(user: 'test',
              password: '123')

Alternatively, setting the current database and credentials can be done in one step:

.. code-block:: ruby

  client.with(database: 'music',
              user:'test',
              password:'123')


MONGODB-CR mechanism
````````````````````

MONGODB-CR was the default authentication mechanism for MongoDB up through version 2.6.

The mechanism can be explicitly set with the credentials.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ],
                             database: 'music',
                             user: 'test',
                             password: '123',
                             auth_mech: :mongodb_cr)


MONGODB-X509 mechanism
``````````````````````
*Requires MongoDB v2.6 or greater.*

The MONGODB-X509 mechanism authenticates a username derived from the distinguished subject name of the X.509 certificate presented by the driver during SSL negotiation. This authentication method requires the use of SSL connections with certificate validation.

For more information about configuring X.509 authentication in MongoDB, please see `this tutorial <http://docs.mongodb.org/master/tutorial/configure-x509/>`_.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ],
                             auth_mech: :mongodb_x509,
                             ssl: true,
                             ssl_cert: '/path/to/client.pem',
                             ssl_ca_cert: '/path/to/ca.pem') )


SASL PLAIN (LDAP) mechanism
```````````````````````````
*Requires MongoDB Enterprise Edition v2.6 or greater.*

MongoDB Enterprise Edition supports the SASL PLAIN authentication mechanism which allows you to delegate authentication using a Lightweight Directory Access Protocol `LDAP <http://en.wikipedia.org/wiki/LDAP>`_ server. When using SASL PLAIN, passwords are sent to the server in plain text. For this reason, we strongly recommend enabling SSL when using SASL PLAIN as your authentication mechanism.

For more information about configuring SASL PLAIN authentication in MongoDB, please see `this tutorial <http://docs.mongodb.org/master/tutorial/configure-ldap-sasl-authentication/>`_.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ],
                             auth_mech: :plain,
                             ssl: true,
                             ssl_verify: true,
                             ssl_cert: '/path/to/client.pem',
                             ssl_ca_cert: '/path/to/ca.pem')

GSSAPI (Kerberos) mechanism
```````````````````````````
*Requires MongoDB Enterprise Edition v2.4 or greater.*

MongoDB Enterprise Edition v2.4+ supports GSSAPI (Kerberos) authentication.

In order to use GSSAPI in the Ruby driver with **JRuby**, you must do the following:

1. Specify several system properties so that the underlying GSSAPI Java libraries can acquire a Kerberos ticket. Please see `this documentation <http://docs.mongodb.org/ecosystem/tutorial/authenticate-with-java-driver/#kerberos-authentication>`_ for more information.

2. Either provide a password OR set the 'java.security.auth.login.config' system property to a config file that references a keytab file.

In order to use the GSSAPI authentication mechanism in the Ruby driver with **MRI**, you must do the following:

1. Create a ticket-granting ticket using kinit. Please see `this documentation <http://linux.die.net/man/1/kinit>`_ for more information.

For more information about deploying MongoDB with Kerberos authentication, please see `this documentation <http://docs.mongodb.org/manual/tutorial/control-access-to-mongodb-with-kerberos-authentication/>`_.

.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ],
                             auth_mech: :gssapi,
                             user: 'test',
                             password: '123')


Read Preferences
----------------

Read preferences determine the candidate replica set members to which a query or command can be sent. They consist of a **mode** specified as a symbol, an array of hashes known as **tag_sets**, and two timing options: **local_threshold** and **server_selection_timeout**.

``local_threshold`` defines the upper limit in seconds of the latency window between the nearest server and suitable servers to which an operation may be sent. The default is 15 milliseconds, i.e. 0.015 seconds.

``server_selection_timeout`` defines how long to block for server selection before throwing an exception. The default is 30,000 milliseconds, i.e. 30 seconds.

For more information on the algorithm used to select a server, please refer to `this documentation <https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst>`_.

The read preference is set as an option on the client or passed an option when a command is run on a database.

.. code-block:: ruby

  # Set read preference on a client, used for all operations
  client = Mongo::Client.new([ '127.0.0.1:27017' ],
                             read: { mode: :secondary,
                                     tag_sets: [{ 'dc' => 'nyc' } ]
                                    })

  # Set read preference for a given command
client.database.command({ collstats: 'test' }, read: { mode: secondary,
                                                       tag_sets: [{ 'dc' => 'nyc' }]})

Mode
````

There are five possible read preference modes. They are ``:primary``, ``:secondary``, ``:primary_preferred``, ``:secondary_preferred``, ``:nearest``. Please see `this documentation <http://docs.mongodb.org/manual/core/read-preference/>`_ for an explanation of the modes and tag sets.

Tag sets
````````

The ``tag_sets`` parameter is an ordered list of tag sets used to restrict the eligibility of servers for selection, such as for data center awareness.

A read preference tag set (T) matches a server tag set (S) – or equivalently a server tag set (S) matches a read preference tag set (T) — if T is a subset of S (i.e. T ⊆ S).

For example, the read preference tag set ``{ dc: 'ny', rack: 2 }`` matches a secondary server with tag set ``{ dc: 'ny', rack: 2, size: 'large' }``.

A tag set that is an empty document matches any server, because the empty tag set is a subset of any tag set. This means the default ``tag_sets`` parameter ``[{}]`` matches all servers.


Aggregation
-----------

The aggregation framework is used to process documents and return computed results. An aggregation is defined in the driver by providing a list of pipeline operators and options to a collection view.

``find`` is called on a collection and then ``aggreagte`` can be called with a list of pipeline operators.
.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'demographics')
  coll = client['populations']
  aggregation = coll.find.aggregate([ { :$group => { :_id => "$city",
                                                     :total_pop => { :$sum => "$pop" }
                                                   }
                                      }
                                    ])

  aggregation.each do |document|
    #=> Yields a BSON::Document.
  end

The MongoDB option, ``allowDiskUse`` can be explicitly set on the aggregation using the ``allow_disk_use`` method:


.. code-block:: ruby

  client = Mongo::Client.new([ '127.0.0.1:27017' ], :database => 'demographics')
  coll = client['populations']
  aggregation = coll.find.aggregate([ { :$group => { :_id => "$city",
                                                     :total_pop => { :$sum => "$pop" }
                                                   }
                                      }
                                    ])
  aggregation.allow_disk_use(true)

  aggregation.each do |document|
    #=> Yields a BSON::Document.
  end


Bulk Operations
---------------

The bulk write API allows a list of write operations to be sent to the server through one method call. The type of execution can either be ``ordered`` or ``unordered``.

A bulk operation is defined by passing a list of operations to the ``bulk_write`` method on a collection. The second argument to the method is options defining whether the operations should be executed in order and what write concern should be used. The default is ``ordered`` and the collection's write concern will be used if no other is specified.


Each operation is defined as a document with one of the follow keys.

- ``insert_one``
- ``delete_one``
- ``delete_many``
- ``replace_one``
- ``update_one``
- ``update_many``


The format for each operation is the following:

insert_one
``````````

.. code-block:: ruby
    
    { :insert_one => { :x => 1 } }

delete_one
``````````

.. code-block:: ruby
    
    { :delete_one => { :x => 1 } }

delete_many
```````````

.. code-block:: ruby
    
    { :delete_many => { :x => 1 } }

replace_one
```````````

.. code-block:: ruby
    
    { :replace_one => { :find => { :x => 1 },
                        :replacement => { :x => 2 },
                        :upsert => true } # upsert is optional and defaults to false
     }

update_one
``````````

.. code-block:: ruby
    
    { :update_one => { :find => { :x => 1 },
                       :update => { '$set' =>  { :x => 2 } },
                       :upsert => true } # upsert is optional and defaults to false
     }

update_many
```````````

.. code-block:: ruby
    
    { :update_many => { :find => { :x => 1 },
                        :update => { '$set' =>  { :x => 2 } },
                        :upsert => true } # upsert is optional and defaults to false
     }

The follow is an example of a list of operations passed to the ``bulk_write`` method.

.. code-block:: ruby

    coll = client['documents']
    coll.bulk_write([ { :insert_one => { :x => 1 }
                      }, 
                      { :update_one => { :find => { :x => 1 },
                                         :update => {'$set' => { :x => 2 } }
                                       }
                      },
                      { :replace_one => { :find => { :x => 2 },
                                          :replacement => { :x => 3 }
                                        }
                      }
                    ],
                    :ordered => true )
    coll.find.to_a #=> { '_id' => ..., 'x' => 3 }
